// vite.config.ts
import { defineConfig } from "file:///F:/Repo/puriUi/node_modules/vite/dist/node/index.js";
import { fileURLToPath, URL } from "node:url";
import { resolve } from "path";
import vue from "file:///F:/Repo/puriUi/node_modules/@vitejs/plugin-vue/dist/index.mjs";

// tailwind.config.ts
import postColorConverter from "file:///F:/Repo/puriUi/node_modules/postcss-color-converter/index.js";
var tailwind_config_default = {
  content: ["./index.html", "./src/**/*.{vue,js,ts,jsx,tsx}", "./components/**/*.{vue,js,ts,jsx,tsx}"],
  darkMode: "class",
  theme: {
    screens: {
      sm: "600px",
      md: "960px",
      lg: "1280px",
      xl: "1920px",
      xxl: "2560px"
    },
    extend: {
      boxShadow: {
        "3xl": "0 35px 60px -15px 0, 0, 0, 0.3)",
        "sm-up": "0 -1px 2px 0, 0, 0, 0.05)",
        "up": "0 -1px 3px 0, 0, 0, 0.1)",
        "md-up": "0 -4px 6px -1px 0, 0, 0, 0.1), 0 -2px 4px -2px 0, 0, 0, 0.1)",
        "lg-up": "0 -10px 15px -3px 0, 0, 0, 0.1), 0 -4px 6px -4px 0, 0, 0, 0.1)",
        "xl-up": "0 -20px 25px -5px 0, 0, 0, 0.1), 0 -8px 10px -6px 0, 0, 0, 0.1)",
        "2xl-up": "0 25px 50px -12px 0, 0, 0, 0.25)"
      },
      colors: {
        primary: {
          50: "var(--color-primary-50)",
          100: "var(--color-primary-100)",
          200: "var(--color-primary-200)",
          300: "var(--color-primary-300)",
          400: "var(--color-primary-400)",
          500: "var(--color-primary-500)",
          600: "var(--color-primary-600)",
          700: "var(--color-primary-700)",
          800: "var(--color-primary-800)",
          900: "var(--color-primary-900)",
          950: "var(--color-primary-950)"
        },
        paper: {
          50: "#F5F6FA",
          100: "#EEF0F6",
          200: "#DADEEC",
          300: "#C9D0E3",
          400: "#B0BBD5",
          500: "#B5BED9",
          600: "#A3AED0",
          700: "#707eae",
          800: "#2D396B",
          900: "#1B2559"
        },
        "cornflower-blue": {
          DEFAULT: "#6366F1",
          50: "#FFFFFF",
          100: "#F9F9FE",
          200: "#D3D4FB",
          300: "#AEAFF8",
          400: "#888AF4",
          500: "#6366F1",
          600: "#2B30EC",
          700: "#1218C8",
          800: "#0D1290",
          900: "#080B57",
          950: "#05083B"
        },
        "gold": {
          DEFAULT: "#BD8556",
          50: "#F1E5DA",
          100: "#EBDACC",
          200: "#E0C5AE",
          300: "#D4B091",
          400: "#C99A73",
          500: "#BD8556",
          600: "#9A663C",
          700: "#6E482B",
          800: "#422B1A",
          900: "#160E09",
          950: "#000000"
        },
        bronze: {
          DEFAULT: "#C17053",
          50: "#F1E0DA",
          100: "#ECD4CB",
          200: "#E1BBAD",
          300: "#D6A28F",
          400: "#CC8971",
          500: "#C17053",
          600: "#9D5339",
          700: "#703B29",
          800: "#432318",
          900: "#160C08",
          950: "#000000"
        }
      },
      fontFamily: {
        sans: [
          "HarmonyOS Sans SC",
          "-apple-system",
          "BlinkMacSystemFont",
          "Helvetica Neue",
          "Helvetica",
          "Arial",
          "PingFang SC",
          "Roboto",
          "Microsoft YaHei",
          "sans-serif"
        ],
        serif: ["Merriweather", "serif"]
      }
    }
  },
  plugins: [postColorConverter({ outputColorFormat: "rgb" })]
};

// vite.config.ts
import terser from "file:///F:/Repo/puriUi/node_modules/@rollup/plugin-terser/dist/es/index.js";
import dts from "file:///F:/Repo/puriUi/node_modules/vite-plugin-dts/dist/index.mjs";
import autoprefixer from "file:///F:/Repo/puriUi/node_modules/autoprefixer/lib/autoprefixer.js";
import tailwindcss from "file:///F:/Repo/puriUi/node_modules/tailwindcss/lib/index.js";
import postColorConverter2 from "file:///F:/Repo/puriUi/node_modules/postcss-color-converter/index.js";
var __vite_injected_original_dirname = "F:\\Repo\\puriUi";
var __vite_injected_original_import_meta_url = "file:///F:/Repo/puriUi/vite.config.ts";
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    dts({
      tsconfigPath: "./tsconfig.app.json",
      outDir: "./dist/es",
      include: ["components/**/*.d.ts", "components/**/*.vue", "components/**/*.ts"]
    }),
    dts({
      tsconfigPath: "./tsconfig.app.json",
      outDir: "./dist/cjs",
      include: ["components/**/*.d.ts", "components/**/*.vue", "components/**/*.ts"]
    })
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url)),
      "#": fileURLToPath(new URL("./types", __vite_injected_original_import_meta_url)),
      "components": fileURLToPath(new URL("./components", __vite_injected_original_import_meta_url))
    }
  },
  css: {
    postcss: {
      plugins: [autoprefixer, tailwindcss(tailwind_config_default), postColorConverter2({ outputColorFormat: "rgb" })]
    }
  },
  build: {
    sourcemap: true,
    // 构建时开启 source map
    cssCodeSplit: true,
    // 开启 css code split
    emptyOutDir: true,
    // 默认情况下，若 outDir 在 root 目录下，则 Vite 会在构建时清空该目录。若 outDir 在根目录之外则会抛出一个警告避免意外删除掉重要的文件。
    lib: {
      // 构建为库。如果指定了 build.lib，build.cssCodeSplit 会默认为 false。
      // __dirname 的值是 vite.config.ts 文件所在目录
      entry: resolve(__vite_injected_original_dirname, "components", "index.ts"),
      // entry 是必需的，因为库不能使用HTML作为入口。
      name: "PuriUi",
      // 暴露的全局变量
      fileName: "index"
      // 输出的包文件名，默认是 package.json 的 name 选项
    },
    rollupOptions: {
      // 自定义底层的Rollup打包配置
      plugins: [terser()],
      // https://rollupjs.org/configuration-options/
      // 确保外部化处理那些你不想打包进库的依赖（作为外部依赖）
      external: [
        "vue",
        "@vuepic/vue-datepicker",
        "@vueuse/integrations/useQRCode",
        "@vueuse/core",
        "qrcode",
        "bootstrap-icons"
      ],
      // 当创建 iife 或 umd 格式的 bundle 时，你需要通过 output.globals 选项提供全局变量名，以替换掉外部引入。
      output: [
        {
          format: "es",
          entryFileNames: "[name].js",
          exports: "named",
          name: "PuriUi",
          dir: "./dist"
        },
        {
          format: "es",
          entryFileNames: "[name].js",
          exports: "named",
          preserveModules: true,
          preserveModulesRoot: "components",
          name: "PuriUi",
          dir: "./dist/es"
        },
        {
          format: "cjs",
          entryFileNames: "[name].js",
          exports: "named",
          name: "PuriUi",
          preserveModules: true,
          inlineDynamicImports: false,
          preserveModulesRoot: "components",
          dir: "./dist/cjs",
          globals: {
            vue: "Vue",
            // 'vue-router': 'VueRouter', // 引入vue-router全局变量，否则router.push将无法使用
            "@vuepic/vue-datepicker": "VueDatePicker",
            "@vueuse/integrations/useQRCode": "UseQRCode",
            "@vueuse/core": "Core",
            qrcode: "qrcode",
            "bootstrap-icons": "bootstrap-icons"
          }
        },
        {
          format: "umd",
          entryFileNames: "[name].js",
          exports: "named",
          name: "PuriUi",
          dir: "./dist/umd",
          globals: {
            vue: "Vue",
            // 'vue-router': 'VueRouter', // 引入vue-router全局变量，否则router.push将无法使用
            "@vuepic/vue-datepicker": "VueDatePicker",
            "@vueuse/integrations/useQRCode": "UseQRCode",
            "@vueuse/core": "Core",
            qrcode: "qrcode"
          }
        }
      ]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
